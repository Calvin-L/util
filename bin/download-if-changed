#!/usr/bin/env python3

"""
Download a file if it has changed.

For usage information:
    download-if-changed -h

This script does not change the modification time of OUTPUT_FILE if the remote
resource has not changed.  It writes to OUTPUT_FILE.etag to avoid re-downloading
when possible.
"""

import argparse
import os
import sys
import subprocess
import tempfile
from urllib.request import urlopen, Request
from urllib.error import HTTPError, URLError

arg_parser = argparse.ArgumentParser(description="Downloader")
arg_parser.add_argument("-v", "--verbose", action="store_true", help="Verbose mode")
arg_parser.add_argument("URL", help="URL to download")
arg_parser.add_argument("OUT_FILE", help="Output file")
args = arg_parser.parse_args()

def warn(s):
    print(s)

def info(s):
    if args.verbose:
        print(s)

url = args.URL
out_path = args.OUT_FILE
out_etag_path = out_path + ".etag"

info("Checking remote resource {} ---> {}".format(url, out_path))

out_etag = None
if os.path.exists(out_path):
    try:
        with open(out_etag_path, "r") as f:
            out_etag = f.read()
    except FileNotFoundError:
        info("File {} did not exist, skipping etag checking".format(out_etag_path))
        pass

try:
    etag = None
    with urlopen(
        Request(url,
            headers={"If-None-Match": out_etag} if out_etag is not None else {})) as response:
        with tempfile.NamedTemporaryFile(mode="wb", delete=False) as tmp_file:
            etag = response.getheader("ETag")
            info("Got a response [etag={!r}]".format(etag))
            tmp_file.write(response.read())
            if subprocess.run(["cmp", out_path, tmp_file.name]).returncode != 0:
                print("Fetched new version of {}".format(out_path))
                os.rename(tmp_file.name, out_path)
            else:
                os.unlink(tmp_file.name)
    if etag is not None:
        with open(out_etag_path, "w") as f:
            f.write(etag)
except HTTPError as e:
    if e.code == 304:
        info("File {} is unchanged".format(out_path))
        sys.exit(0)
    else:
        raise
except URLError:
    warn("Failed to update {}... are you offline?".format(out_path), file=sys.stderr)
    sys.exit(0 if os.path.exists(out_path) else 1)
