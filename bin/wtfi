#!/usr/bin/env python3

import argparse
import subprocess
import re

LINE_DISPLAY_LENGTH = 60

def parse_args():
    parser = argparse.ArgumentParser(
        description="Where the fuck is...? (Search your current directory for "
            + "a regex in file contents or names).")
    parser.add_argument("-x", "--exclude", action="append", metavar="REGEX", help=
        "Exclude paths matching this pattern.  You can provide this option " +
        "multiple times.  If you do, then paths that match ANY exclude pattern "
        "will be excluded.")
    parser.add_argument("regex")
    return parser.parse_args()

def run(args):
    exclude = None
    if args.exclude:
        exclude = "|".join("(?:{})".format(x) for x in args.exclude)
        exclude = re.compile(exclude, flags=re.IGNORECASE)
    r = re.compile(args.regex, flags=re.IGNORECASE)
    for fname in subprocess.run(["find", ".", "-type", "f", "-print0"], stdout=subprocess.PIPE).stdout.split(b"\0"):
        if not fname:
            break
        fname = fname.decode("utf-8")
        if exclude and exclude.search(fname):
            continue
        match = False
        if r.search(fname):
            match = True
        lno = 1
        matches = []
        with open(fname, "rb") as handle:
            for line in handle:
                try:
                    line = line.decode("UTF-8").strip()
                    m = r.search(line)
                    if m:
                        match = True
                        matches.append((lno, m.start(), line))
                    lno += 1
                except UnicodeDecodeError:
                    break
        if match:
            print(fname)
            for n, st, l in matches:
                l_len = len(l)
                if l_len > LINE_DISPLAY_LENGTH:
                    start_offset = max(0, min(st - LINE_DISPLAY_LENGTH//2, l_len - LINE_DISPLAY_LENGTH))
                    l = l[start_offset : start_offset+LINE_DISPLAY_LENGTH]
                    if start_offset > 0:
                        l = "..." + l
                    if start_offset + LINE_DISPLAY_LENGTH < l_len:
                        l += "..."
                print(" -> line {}: {}".format(n, l))

if __name__ == "__main__":
    run(parse_args())
