Notes about versioning in a code repository.

A common problem is that some build system files (package.cabal, pom.xml, etc.)
REQUIRE a version number for the software, and that version number can easily
get out-of-sync with reality.  You would really hope that if the source code
claims to be a particular version, it really is that version.

How should you maintain a version number written in a build system file?

(Rant: this is a commonly-asked question that is CONSISTENTLY MISUNDERSTOOD [1,
3, 6].  Internet commenters seem to read this question as being about how to
choose a version number for a new release, and point to irrelevant
documentation about semantic versioning [8, 9].  Instead, this is a question
about how to ensure that the version number is always meaningful, even for
development commits between releases.)

I have seen two practical approaches.

  1. Use the version control system to "store" the version number [2, 4].  As
     part of the build process, determine the version using `git describe` or
     some similar command.  This approach is nice because it gives the maximum
     amount of information about the version.  It is ugly because it introduces
     an extra step in the build.  It may require an entirely separate build
     system to overcome the fact that Cabal and Maven can't dynamically
     determine the version number.

     1a. If you need to produce a source release that stands independent from
         the code repository, you will need to compute the version number and
         store it in the source release.

     1b. This might not be appropriate if the output of `git describe` is not
         suitable for your build system.  For instance, it is only barely
         acceptable as a Cabal version number [9].

  2. Do a dance during release: update the version number to a release version,
     commit, tag the commit, update the version number to a development
     version, commit, push [7].  This is common in the Java ecosystem, with the
     "-SNAPSHOT" suffix indicating that a version number is a development
     version.

     2a. Unlike approach 1, the version number does not carry quite enough
         information to recover the exact commit.  However, it does not require
         extra build steps.


[1]: https://stackoverflow.com/questions/37814286/how-to-manage-the-version-number-in-git
[2]: https://gist.github.com/hvr/656738/45b9cfac212e235b857709e5f06068eebf3f1244
[3]: https://stackoverflow.com/questions/32830463/what-cabal-version-should-i-have-for-my-inter-release-development-branch
[4]: https://softwareengineering.stackexchange.com/a/141986
[5]: https://softwareengineering.stackexchange.com/questions/388584/versioning-where-exactly-in-the-code-or-repository-should-i-write-the-version-n
[6]: https://www.reddit.com/r/git/comments/2pfd6l/opinions_on_when_to_bump_version_numbers/
[7]: https://gist.github.com/nzakas/7633640
[8]: https://semver.org/
[9]: https://pvp.haskell.org/
